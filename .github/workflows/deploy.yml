#This workflow will build a project using Maven, create a docker image and then deploy it on the on-prem kubernetes cluster

name: Deploy Example App

on:
  push:
    branches:
      - develop
      - staging
      - master

env:
  CONTAINER_NAME: sample_app
  NAMESPACE: example
  DOCKER_REGISTRY: registry.example.com:443

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: getenv
    environment:
      name: $${{ needs.getenv.outputs.env_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set Environment Variables
        run: |
          echo "KUBECONFIG=${{ needs.getenv.outputs.kubeconfig }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ needs.getenv.outputs.release_env }}" >> $GITHUB_ENV
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle Build
        run: |
          ./gradlew build
          echo "VERSION=$(./gradlew -q gPV)" >> $GITHUB_ENV
      - name: Login to DockerHub
        run: docker login $DOCKER_REGISTRY --username ${{ secrets.ARTIFACTORY_USERNAME }} -- password ${{ secrets.ARTIFACTORY.PASSWORD }}
      - name: Build Docker Image
        run: docker build -t $DOCKER_REGISTRY/$CONTAINER_NAME:$VERSION
      - name: Deploy to onprem K8
        run: |
          echo "TIMESTAMP"=$(date '+%Y%m%d-%H%M%S') >> GITHUB_ENV
          helm upgrade --install --values external-assets/helm/values-$ENVIRONMENT.yaml $CONTAINER_NAME-$ENVIRONMENT -i --atomic --timeout 300s ./external-assets/helm/ --set image.tag=$VERSION --create-namespace --namespace $NAMESPACE --set-string timestamp=${TIMESTAMP}

  getenv:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [[ ${GITHUB_REF#/*/*} ==develop ]]; then
            echo "::set-output name=env_name::Sandbox"
            echo "::set-output name=kubeconfig::/opt/kubecfg/dev-cfg"
            echo "::set-output name=release_env::sandbox"
          elif [[ ${GITHUB_REF#/*/*} ==staging ]]; then
             echo "::set-output name=env_name::Staging"
             echo "::set-output name=kubeconfig::/opt/kubecfg/test-cfg"
             echo "::set-output name=release_env::Staging"
          elif [[ ${GITHUB_REF#/*/*} ==master ]]; then
             echo "::set-output name=env_name::Production"
             echo "::set-output name=kubeconfig::/opt/kubecfg/prod-cfg"
             echo "::set-output name=release_env::Production"
          else
            echo "Invalid Branch"
            exit 1
          fi
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      kubeconfig: ${{ steps.branch_check.outputs.kubeconfig }}
      release_env: ${{ steps.branch_check.outputs.release_env }}



